#LEVEL:2 Task:2 - Price Range Analysis
# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = r'C:\Users\LENOVO\Downloads\Dataset .csv' 
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    print("Error: Dataset file not found. Please check the file path.")
    exit()

# Normalize column names
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('[^a-z0-9_]', '', regex=True)

# Check for required columns
required_columns = ['price_range', 'aggregate_rating']
missing_columns = [col for col in required_columns if col not in df.columns]
if missing_columns:
    print(f"Error: Missing columns in the dataset - {missing_columns}")
    exit()

# Convert price_range to string for consistent handling
df['price_range'] = df['price_range'].astype(str)

# ** Step 1: Determine the Most Common Price Range **
most_common_price_range = df['price_range'].mode()[0]
print(f"\nMost Common Price Range: {most_common_price_range}")

# ** Step 2: Calculate the Average Rating for Each Price Range **
average_ratings_by_price_range = df.groupby('price_range')['aggregate_rating'].mean()
print("\nAverage Ratings by Price Range:")
print(average_ratings_by_price_range)

# ** Step 3: Identify the Price Range with the Highest Average Rating **
highest_avg_rating_price_range = average_ratings_by_price_range.idxmax()
highest_avg_rating = average_ratings_by_price_range.max()
print(f"\nPrice Range with Highest Average Rating: {highest_avg_rating_price_range}")
print(f"Highest Average Rating: {highest_avg_rating:.2f}")

# Visualize the Average Ratings by Price Range
plt.figure(figsize=(8, 5))
sns.barplot(
    x=average_ratings_by_price_range.index,
    y=average_ratings_by_price_range.values,
    palette='viridis'
)
plt.title("Average Ratings by Price Range")
plt.xlabel("Price Range")
plt.ylabel("Average Rating")
plt.ylim(0, 5)
plt.show()

# Highlighting the Price Range with the Highest Rating
plt.figure(figsize=(8, 5))
sns.barplot(
    x=average_ratings_by_price_range.index,
    y=average_ratings_by_price_range.values,
    palette=[
        'gold' if price_range == highest_avg_rating_price_range else 'gray'
        for price_range in average_ratings_by_price_range.index
    ]
)
plt.title("Average Ratings by Price Range (Highlighting the Highest)")
plt.xlabel("Price Range")
plt.ylabel("Average Rating")
plt.ylim(0, 5)
plt.show()
